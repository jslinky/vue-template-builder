
//*******************************
//    CONTAINER: Custom Prop Rulesets
//*******************************

//-------------------
//  Container props
//--------------------

#props {
    .container() {
        @width: {
            --container-maxWidth                       : @container-maxWidth;    
            --container-mobileWidthVal                 : @container-mobileWidthVal;
            --container-mobileWidth                    : auto; // refer to a less var?            
            --container-tabletWidthVal                 : @container-tabletWidthVal;
            --container-tabletWidth                    : auto;
            --container-computerWidth                  : auto;
            --container-computerWidthVal               : @container-computerWidthVal;
            --container-largeMonitorWidthVal           : @container-largeMonitorWidthVal;
            --container-largeMonitorWidth              : ~"calc((var(--container-widthVal) * ((1 / var(--fontSizeRoot)) * 1rem)) - (var(--gutter) * 2))";                        
        };
        @gutterMultiply: {
            --container-mobileGutterMultiplyer         : @container-mobileGutterMultiplyer;
            --container-tabletGutterMultiplyer         : @container-tabletGutterMultiplyer;   
            --container-computerGutterMultiplyer       : @container-computerGutterMultiplyer;  
            --container-largeMonitorGutterMultiplyer   : @container-largeMonitorGutterMultiplyer;    
        };
        @extend-prop-classes: {
            //*******************************
            //   Classes used for extending properties
            //*******************************
            // width props
            .o-container-props-width { #props.container(width); }
            // gutter props
            .o-container-props-gutterMultiply { #props.container(gutterMultiply); }

        };
        @extend-elements: {
            //*******************************
            //   Element classes that extend related properties
            //*******************************          
            *[class*="o-container"] { 
                &:extend(
                .o-container-props-width, 
                .o-container-props-gutterMultiply, 
                .root-props-spacing
                ); 
            }            
        };
        @output-custom-properties: {
        #objects.container-variables();
        .output-custom-properties() when 
        (@customPropFallback = false) and (@local-scoped-custom-prop-fallback = false) and (@static-variables-only = false), 
        (@customPropFallback = true) and (@static-variables-only = false),
        (@customPropFallback = false) and (@local-scoped-custom-prop-fallback = true) {
            //*******************************
            //   Classes used for extending properties
            //*******************************
            #props.container(extend-prop-classes);
            //*******************************
            //   Element classes that extend related properties
            //*******************************        
            #props.container(extend-elements);
        }
        .output-custom-properties();
        };        
    }
}

//*******************************
//   DEFINE MIXIN
//*******************************

#props {
    .container(@item) {
        #props.container();
        #objects.container-variables();
        @rules: @@item;
        @rules();
    }
}
  

//*******************************
//   Init module custom property output
//*******************************
#props.container(output-custom-properties);